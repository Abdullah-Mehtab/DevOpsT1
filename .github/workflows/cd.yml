name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    name: CD on self-hosted
    runs-on: [self-hosted, linux, x64]
    timeout-minutes: 30

    env:
      DEPLOY_DIR: /var/www/devopst1
      ARTIFACT_NAME: deploy-artifact
      ARTIFACT_FILE: deploy.zip

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Ensure upstream CI succeeded
        if: ${{ github.event.workflow_run.conclusion != 'success' }}
        run: |
          echo "Upstream workflow did not succeed. Exiting."
          exit 1

      - name: Download artifact from CI run
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifact
          run-id: ${{ github.event.workflow_run.id }}

      - name: Inspect downloaded artifact
        run: |
          ls -lah artifact || true
          file artifact/${{ env.ARTIFACT_FILE }} || true

      - name: Prepare runner-owned temp dir and extract artifact
        run: |
          echo "RUNNER_TEMP=${RUNNER_TEMP:-/tmp/runner_temp}"
          TMP_DIR="${RUNNER_TEMP:-/tmp/runner_temp}/deploy_temp"
          rm -rf "$TMP_DIR"
          mkdir -p "$TMP_DIR"
          unzip -o artifact/${{ env.ARTIFACT_FILE }} -d "$TMP_DIR"
          echo "Contents of $TMP_DIR:"
          ls -lah "$TMP_DIR"

      - name: Deploy to $DEPLOY_DIR (atomic via rsync)
        run: |
          # create target dir (requires sudo)
          sudo mkdir -p $DEPLOY_DIR
          # copy contents from runner temp to target atomically and preserve ownership where possible
          sudo rsync -a --delete "${RUNNER_TEMP:-/tmp/runner_temp}/deploy_temp/" "$DEPLOY_DIR/"
          # set correct web user ownership
          sudo chown -R www-data:www-data $DEPLOY_DIR
          # ensure perms are sane
          sudo find $DEPLOY_DIR -type d -exec chmod 755 {} \;
          sudo find $DEPLOY_DIR -type f -exec chmod 644 {} \;
          # test nginx config and reload
          sudo nginx -t
          sudo systemctl restart nginx

      - name: Verify deployment (simple HTTP check)
        run: |
          sleep 2
          curl -f http://localhost/ || (curl -v http://localhost/ && exit 1)

      - name: Cleanup runner temp
        if: always()
        run: |
          rm -rf "${RUNNER_TEMP:-/tmp/runner_temp}/deploy_temp"
